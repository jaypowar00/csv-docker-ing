The csvserver assignment. -- line @25 answer startes and first at line @2 i will share code for part1 task for file input ----- all the refrence can be found in original readme file
--#!/bin/bash

random()
{
    local range=${1:-1};

    RAND=`od -t uI -N 4 /dev/urandom | awk '{print $2}'`
    let "RAND=$RAND%($range+1)"
}

echo "Input for Length ..."
read n;
i=0;

while [ $(( n -=1 )) -ge "0" ]; do
    i=$((i+1));
    random 300
    echo "$i,$RAND">>inputdata
done

-----------------------------------------------------------------------------------------------------


-this is for part one with question and answers

Run the container image infracloudio/csvserver:latest in background and check if it's running
It's not running 

If it's failing then try to find the reason, once you find the reason, move to the next step.
error while reading the file "/csvserver/inputdata": open /csvserver/inputdata: no such file or directory

Write a bash script gencsv.sh to generate a file named inputFile whose content looks like:
0, 234
1, 98
2, 34

These are comma separated values with index and a random number.
Running the script without any arguments, should generate the file inputFile with 10 such entries in current directory.
You should be able to extend this script to generate any number of entries, for example 100000 entries.
Run the script to generate the inputFile. Make sure that the generated file is readable by other users.
In bash script we are taking 15 as number of entries as we can extend entries .


Run the container again in the background with file generated in (3) available inside the container (remember the reason you found in (2)).

---------docker cp inputdata ccad6a0f656a :/csvserver/

Get shell access to the container and find the port on which the application is listening. Once done, stop / delete the running container.
------docker exec -it ccad6a0f656a /bin/bash
9300/tcp

Same as (4), run the container and make sure,
The application is accessible on the host at http://localhost:9393
Set the environment variable CSVSERVER_BORDER to have value Orange
--
------------docker stop ccad6a0f656a
-------docker rm ccad6a0f656a
-----docker logs loving_keller
----url: (7) Failed to connect to localhost port 9393: Connection refused
---docker run -d -p 9393:9300 8cb989ef80b5
-docker run -e CSVSERVER_BORDER='orange' -d -p 9393:9300 8cb989ef80b5




--------------------------------------------------------######################for part 2 ###################------------------------------------------------------------------
steps done - 

in previous part 1 we made container which was running ...

in part to we commit that container to image again - main we container that working container to image and tag it to new_name

after that in part 2 we have to make docker-compose file that will run application directly so for that we used this new_name image add it to docker compose and add ports and env_vaiable to it .

after that we just do     -      docker compose up and it runs


commands performed to do part 2 - 


docker images -a

docker commit ae9f9cb89667                # to make image from container which we made part 1 

docker tag 4636a379593b final_dep          after that we give that image name and use same in docker-compose file  ---- below


touch docker-compose.yml

below is docker file -------------------------->>>>>>>>>>>>>

version: "1"
services:
    csvserver:
        container_name: final_container
        image: final_dep:latest
        ports:
            - "9393:9300"
        environment:
            - CSVSERVER_BORDER=Orange

-----------------------------##############################------------------------------------

just do docker compose up  or        docker-compose up

it will run container 

and do cltr^c to stop docker-compose

------------------------------------------------------------------------------##################           part3  #################-----------------------------------------

Part III
Delete any containers running from the last part.
commands 
Add Prometheus container (prom/prometheus:v2.22.0) to the docker-compose.yaml form part II.


Configure Prometheus to collect data from our application at <application>:<port>/metrics endpoint. (Where the <port> is the port from I.5)
Make sure that Prometheus is accessible at http://localhost:9090 on the host.
Type csvserver_records in the query box of Prometheus. Click on Execute and then switch to the Graph tab.
